-List the school names, community names and average attendance for communities with a hardship index of 98.

SELECT SD.NAME_OF_SCHOOL, SD.COMMUNITY_AREA_NAME, SD.AVERAGE_STUDENT_ATTENDANCE
FROM CHICAGO_PUBLIC_SCHOOLS AS SD
LEFT OUTER JOIN CHICAGO_SOCIO_ECONOMIC_DATA AS ED
ON SD.COMMUNITY_AREA_NUMBER = ED.COMMUNITY_AREA_NUMBER
WHERE ED.HARDSHIP_INDEX= 98;

-List all crimes that took place at a school. Include case number, crime type and community name

SELECT CD.CASE_NUMBER, CD.PRIMARY_TYPE, CD.LOCATION_DESCRIPTION, SD.COMMUNITY_AREA_NAME
FROM chicago_public_schools AS SD
RIGHT OUTER JOIN chicago_crime AS CD
ON SD.COMMUNITY_AREA_NUMBER = CD.COMMUNITY_AREA_NUMBER
WHERE CD.LOCATION_DESCRIPTION like "%School%";

-Write and execute a SQL statement to create a view showing the columns listed in the following table, with new column names as shown in the second column.

Column name in CHICAGO_PUBLIC_SCHOOLS    	Column name in view

NAME_OF_SCHOOL	                          School_Name
Safety_Icon	                              Safety_Rating
Family_Involvement_Icon	                  Family_Rating
Environment_Icon	                        Environment_Rating
Instruction_Icon	                        Instruction_Rating
Leaders_Icon	                            Leaders_Rating
Teachers_Icon	                            Teachers_Rating

CREATE VIEW SCHOOLS_INFO (School_Name, School_Rating, Family_Rating, Environment_Rating, Instruction_Rating, Leaders_Rating, Teachers_Rating) AS
SELECT NAME_OF_SCHOOL, Safety_Icon, Family_Involvement_Icon, Environment_Icon, Instruction_Icon, Leaders_Icon, Teachers_Icon
FROM chicago_public_schools;
SELECT * FROM SCHOOLS_INFO;

-Write the structure of a query to create or replace a stored procedure called UPDATE_LEADERS_SCORE that takes a in_School_ID parameter as an integer and a in_Leader_Score parameter as an integer.
-Inside the stored procedure, write a SQL statement to update the Leaders_Score field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID to the value in the in_Leader_Score parameter.
-Inside the stored procedure, write a SQL IF statement to update the Leaders_Icon field in the CHICAGO_PUBLIC_SCHOOLS table for the school identified by in_School_ID using the following information.

DELIMITER @

CREATE PROCEDURE UPDATE_LEADERS_SCORE (IN in_School_ID INTEGER, IN in_Leader_Score INTEGER)
    LANGUAGE SQL
    MODIFIES SQL DATA
BEGIN
    UPDATE chicago_public_schools
    SET Leaders_Score = in_Leader_Score
    WHERE School_ID = in_School_ID;

    IF in_Leader_Score > 0 AND in_Leader_Score < 20 THEN
                    UPDATE chicago_public_schools
                    SET Leaders_Icon = 'Very_weak'
                    WHERE in_School_ID = School_ID AND in_Leader_Score = Leaders_Score;
    ELSEIF in_Leader_Score >= 20  AND in_Leader_Score < 40   THEN
                    UPDATE chicago_public_schools
                    SET Leaders_Icon = 'Weak'
                    WHERE in_School_ID = School_ID AND in_Leader_Score = Leaders_Score; 
    ELSEIF in_Leader_Score >= 40  AND in_Leader_Score < 60   THEN
                    UPDATE chicago_public_schools
                    SET Leaders_Icon = 'Average'
                    WHERE in_School_ID = School_ID AND in_Leader_Score = Leaders_Score;
    ELSEIF in_Leader_Score >= 60  AND in_Leader_Score < 80   THEN
                    UPDATE chicago_public_schools
                    SET Leaders_Icon = 'Strong'
                    WHERE in_School_ID = School_ID AND in_Leader_Score = Leaders_Score; 
    ELSEIF in_Leader_Score >= 40  AND in_Leader_Score < 60   THEN
                    UPDATE chicago_public_schools
                    SET Leaders_Icon = 'Very Strong'
                    WHERE in_School_ID = School_ID AND in_Leader_Score = Leaders_Score;        

END IF;
    
END @

DELIMITER ;

-Update the stored procedure definition. Add a generic ELSE clause to the IF statement that rolls back the current work if the score did not fit any of the preceding categories.

DELIMITER @
CREATE  PROCEDURE UPDATE_LEADERS_SCORE (IN in_School_ID integer, IN in_Leader_Score integer)
        LANGUAGE SQL
        MODIFIES SQL DATA
                BEGIN 
                 DECLARE EXIT HANDLER FOR SQLEXCEPTION
                BEGIN
                    ROLLBACK;
                    RESIGNAL;
                    END;                
     
            START TRANSACTION;

                                 
                        UPDATE chicago_public_schools
                        SET  Leaders_Score = in_Leader_Score
                        WHERE School_ID = in_School_ID;
ELSE ROLLBACK WORK;
                       
                                
                        END IF;
                                     commit;
                                
                END
                @
  DELIMITER ; 

